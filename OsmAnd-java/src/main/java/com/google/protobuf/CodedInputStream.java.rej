***************
*** 32,37 ****
  
  import java.io.IOException;
  import java.io.InputStream;
  import java.util.ArrayList;
  import java.util.List;
  
--- 32,38 ----
  
  import java.io.IOException;
  import java.io.InputStream;
+ import java.io.RandomAccessFile;
  import java.util.ArrayList;
  import java.util.List;
  
***************
*** 61,66 ****
    public static CodedInputStream newInstance(final byte[] buf) {
      return newInstance(buf, 0, buf.length);
    }
  
    /**
     * Create a new CodedInputStream wrapping the given byte array slice.
--- 62,72 ----
    public static CodedInputStream newInstance(final byte[] buf) {
      return newInstance(buf, 0, buf.length);
    }
+   
+   // begin osmand change
+   public static CodedInputStream newInstance(RandomAccessFile raf) {
+     return new CodedInputStream(raf);
+   }
  
    /**
     * Create a new CodedInputStream wrapping the given byte array slice.
***************
*** 532,537 ****
    // -----------------------------------------------------------------
  
    private final byte[] buffer;
    private int bufferSize;
    private int bufferSizeAfterLimit;
    private int bufferPos;
--- 538,544 ----
    // -----------------------------------------------------------------
  
    private final byte[] buffer;
+   private RandomAccessFile raf;
    private int bufferSize;
    private int bufferSizeAfterLimit;
    private int bufferPos;
***************
*** 559,565 ****
  
    private static final int DEFAULT_RECURSION_LIMIT = 64;
    private static final int DEFAULT_SIZE_LIMIT = 64 << 20;  // 64MB
-   private static final int BUFFER_SIZE = 4096;
  
    private CodedInputStream(final byte[] buffer, final int off, final int len) {
      this.buffer = buffer;
--- 566,572 ----
  
    private static final int DEFAULT_RECURSION_LIMIT = 64;
    private static final int DEFAULT_SIZE_LIMIT = 64 << 20;  // 64MB
+   private static final int BUFFER_SIZE = 5 * 1024;
  
    private CodedInputStream(final byte[] buffer, final int off, final int len) {
      this.buffer = buffer;
***************
*** 569,574 ****
      input = null;
    }
  
    private CodedInputStream(final InputStream input) {
      buffer = new byte[BUFFER_SIZE];
      bufferSize = 0;
--- 576,591 ----
      input = null;
    }
  
+   // osmand change
+ 	private CodedInputStream(final RandomAccessFile raf) {
+ 		buffer = new byte[BUFFER_SIZE];
+ 		this.bufferSize = 0;
+ 		bufferPos = 0;
+ 		totalBytesRetired = 0;
+ 		this.raf = raf;
+ 		input = null;
+ 	}
+ 
    private CodedInputStream(final InputStream input) {
      buffer = new byte[BUFFER_SIZE];
      bufferSize = 0;
***************
*** 734,740 ****
      totalBytesRetired += bufferSize;
  
      bufferPos = 0;
-     bufferSize = (input == null) ? -1 : input.read(buffer);
      if (bufferSize == 0 || bufferSize < -1) {
        throw new IllegalStateException(
            "InputStream#read(byte[]) returned invalid result: " + bufferSize +
--- 752,770 ----
      totalBytesRetired += bufferSize;
  
      bufferPos = 0;
+     if (raf != null) {
+     	// osmand change
+      totalBytesRetired = (int) raf.getFilePointer();
+     	long remain = raf.length() - raf.getFilePointer();
+     	bufferSize = (int) Math.min(remain, buffer.length);
+     	if(bufferSize > 0) {
+     		raf.readFully(buffer, 0, bufferSize);
+     	} else {
+     		bufferSize = -1;
+     	}
+     } else {
+     	bufferSize = (input == null) ? -1 : input.read(buffer);
+     }
      if (bufferSize == 0 || bufferSize < -1) {
        throw new IllegalStateException(
            "InputStream#read(byte[]) returned invalid result: " + bufferSize +
***************
*** 848,855 ****
          final byte[] chunk = new byte[Math.min(sizeLeft, BUFFER_SIZE)];
          int pos = 0;
          while (pos < chunk.length) {
-           final int n = (input == null) ? -1 :
-             input.read(chunk, pos, chunk.length - pos);
            if (n == -1) {
              throw InvalidProtocolBufferException.truncatedMessage();
            }
--- 876,890 ----
          final byte[] chunk = new byte[Math.min(sizeLeft, BUFFER_SIZE)];
          int pos = 0;
          while (pos < chunk.length) {
+         	final int n;
+         	// osmand change
+         	if(raf != null) {
+         		raf.readFully(chunk, pos, chunk.length - pos);
+         		n = chunk.length - pos;
+         	} else {
+         		n = (input == null) ? -1 :
+         	    input.read(chunk, pos, chunk.length - pos);
+         	}
            if (n == -1) {
              throw InvalidProtocolBufferException.truncatedMessage();
            }
***************
*** 904,909 ****
        int pos = bufferSize - bufferPos;
        bufferPos = bufferSize;
  
        // Keep refilling the buffer until we get to the point we wanted to skip
        // to.  This has the side effect of ensuring the limits are updated
        // correctly.
--- 939,954 ----
        int pos = bufferSize - bufferPos;
        bufferPos = bufferSize;
  
+       // osmand change
+       if(raf != null) {
+          bufferPos = 0;
+          bufferSize = 0;
+       	 int n = raf.skipBytes(size - pos);
+         totalBytesRetired = (int) raf.getFilePointer();
+       	 if (n <= 0) {
+              throw InvalidProtocolBufferException.truncatedMessage();
+          }
+       } else {
        // Keep refilling the buffer until we get to the point we wanted to skip
        // to.  This has the side effect of ensuring the limits are updated
        // correctly.
***************
*** 915,920 ****
        }
  
        bufferPos = size - pos;
      }
    }
  }
--- 960,982 ----
        }
  
        bufferPos = size - pos;
+       }
      }
    }
+   
+   public void seek(long pointer) throws IOException {
+ 	  if (pointer - totalBytesRetired >= 0 && pointer - totalBytesRetired < bufferSize) {
+ 		  if (pointer > currentLimit) {
+ 		  // Then fail.
+ 			  throw InvalidProtocolBufferException.truncatedMessage();
+ 		  }
+ 		  bufferPos = (int) (pointer - totalBytesRetired);
+ 	  } else {
+ 		  totalBytesRetired = (int) pointer;
+ 		  bufferSizeAfterLimit = 0;
+ 		  raf.seek(pointer);
+ 		  bufferPos = 0;
+ 		  bufferSize = 0;
+ 	  }
+   }
  }
